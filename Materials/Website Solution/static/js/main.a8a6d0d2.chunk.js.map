{"version":3,"sources":["components/common/Navigation.js","components/reviews/Review.js","components/forms/ReviewForm.js","api/index.js","actions/actionTypes.js","containers/ReviewFormContainer.js","actions/index.js","components/reviews/ReviewList.js","containers/ReviewListContainer.js","components/books/Book.js","components/common/DropWrapper.js","components/forms/BookForm.js","components/common/useHover.js","containers/BookFormContainer.js","components/books/BookList.js","containers/BookListContainer.js","components/about/About.js","App.js","reportWebVitals.js","store/reviewsReducer.js","store/booksReducer.js","store/reducers.js","index.js","store/configureStore.js"],"names":["Navigation","className","to","Review","props","review","React","memo","ReviewForm","bookId","addReview","initialValues","content","validate","values","errors","length","onSubmit","resetForm","then","isSubmitting","type","name","as","disabled","component","url","process","headers","accept","addBook","book","fetch","method","mode","body","JSON","stringify","response","json","LIST_REVIEWS","ADD_REVIEW","LIST_BOOKS","ADD_BOOK","mapDispatchToProps","dispatch","api","actionTypes","ReviewFormContainer","connect","state","ownProps","parseInt","ReviewList","receiveReviews","reviews","match","params","title","useEffect","map","item","i","ReviewListContainer","Book","nextProps","this","author","cover","src","alt","Component","defaultProps","DropWrapper","dropped","children","onDragOver","e","preventDefault","onDragEnter","onDrop","BookForm","useState","isHovering","setIsHovering","ref","useRef","handleDragOver","handleDragLeave","node","current","addEventListener","removeEventListener","useHover","hoverRef","undefined","image","setImage","handleImageChosen","newHeight","newWidth","size","files","target","dataTransfer","f","reader","FileReader","onload","e2","Image","height","width","oldWidth","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","result","readAsDataURL","style","opacity","BookFormContainer","BookList","getBooks","books","receiveBooks","BookListContainer","About","App","store","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","conver","bookStore","combineReducers","action","middlewares","ReduxThunk","createStore","applyMiddleware","configureStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8a6d0d2.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst Navigation = () => (\n\t<nav className=\"navbar navbar-expand-sm bg-light\">\n\t\t<Link className=\"navbar-brand\" to=\"/\">Book Reactions</Link>\n\t\t<ul className=\"navbar-nav\">\n\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link className=\"nav-link\" to=\"/\">Home</Link>\n\t\t\t\t</li>\n\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link className=\"nav-link\" to=\"/about\">About</Link>\n\t\t\t</li>\n\t\t</ul>\n\n\t</nav>\n);\n\nexport default Navigation;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Review = (props) => (\n    <tr>\n        <td >{props.review}</td>\n    </tr>\n    );\n\nReview.propTypes = { review: PropTypes.string.isRequired };\n\nexport default React.memo(Review);","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\n\nconst ReviewForm = ({ bookId, addReview }) => (\n    <Formik\n        initialValues={{\n            content: ''\n        }}\n        validate={values => {\n            const errors = {};\n            if (!values.content) {\n                errors.content = 'Review cannot be empty';\n            } else if (values.content.length < 5) {\n                errors.content = 'Review must be at least 5 characters';\n            }\n            return errors;\n        }}\n        onSubmit={(values, { resetForm }) => {\n            const review = {\n                bookId,\n                content: values.content\n            }\n            addReview(review).then(() => {\n                resetForm();\n            });\n        }}\n    >\n        {({ isSubmitting }) => (\n            <Form className=\"form-group form-inline\">\n                <label className=\"control-label\">Review:\n                    <Field type=\"text\" className=\"form-control\" name=\"content\" as=\"textarea\" />\n                </label>\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Add Review</button>\n                <ErrorMessage name=\"content\" className=\"alert alert-danger\" component=\"div\" />\n            </Form>\n\n\n        )}\n    </Formik>\n)\n\n\nReviewForm.propTypes = {\n    bookId: PropTypes.number.isRequired\n};\n\nexport default ReviewForm;","const url = process.env.REACT_APP_URL; \n\nconst headers = {\n    accept: 'application/json',\n    'content-type': 'application/json'\n};\n\nexport const fetchAllBooks = () => {\n    return fetch(url + 'Books').then((response) => {\n        return response.json();\n    });\n}\n\nexport const addBook = (book) => {\n    return fetch(url + 'Books',\n        {\n            method: 'post',\n            mode: 'cors',\n            headers: headers,\n            body: JSON.stringify(book)\n        }).then((response) => {\n            return response.json();\n        });\n}\n\nexport const fetchReviews = (bookId) => {\n    return fetch(url + \"Reviews/\" + bookId)\n        .then(function (response) {\n            return response.json();\n        });\n}\n\nexport const addReview = (review) => {\n    return fetch(url + 'Reviews',\n        {\n            method: 'post',\n            mode: 'cors',\n            headers: headers,\n            body: JSON.stringify(review)\n        }).then((response) => {\n            return response.json();\n        });\n}","export const LIST_REVIEWS = \"LIST_REVIEWS\";\nexport const ADD_REVIEW = \"ADD_REVIEW\";\nexport const LIST_BOOKS = \"LIST_BOOKS\";\nexport const ADD_BOOK = \"ADD_BOOK\";","import {connect} from 'react-redux';\nimport ReviewForm from '../components/forms/ReviewForm';\nimport { addReview } from '../actions';\n\nconst mapStateToProps = (state, ownProps) => ({\n    bookId : parseInt(ownProps.bookId)\n});\n\nconst mapDispatchToProps = {\n    addReview\n};\n\nconst ReviewFormContainer = connect(mapStateToProps, mapDispatchToProps)(ReviewForm);\n\nexport default ReviewFormContainer;\n","import * as api from '../api';\nimport * as actionTypes from './actionTypes';\n\nexport const receiveReviews = (bookId) => (dispatch) => {\n    return api.fetchReviews(bookId).then((response) => {\n        dispatch({\n            type: actionTypes.LIST_REVIEWS,\n            response\n        });\n    })\n}\n\nexport const addReview = (review) => (dispatch) => {\n    return api.addReview(review).then((response) => {\n        dispatch({\n            type: actionTypes.ADD_REVIEW,\n            response\n        });\n    })\n}\n\nexport const receiveBooks = () => (dispatch) => {\n    return api.fetchAllBooks().then((response) => {\n        dispatch({\n            type: actionTypes.LIST_BOOKS,\n            response\n        });\n    })\n}\n\nexport const addBook = (book) => (dispatch) => {\n    return api.addBook(book).then((response) => {\n        dispatch({\n            type: actionTypes.ADD_BOOK,\n            response\n        });\n    })\n}\n\n","import Review from './Review';\nimport { useEffect } from 'react';\nimport ReviewFormContainer from '../../containers/ReviewFormContainer';\nfunction ReviewList({ receiveReviews, reviews, match: { params: { title, bookId } } }) {\n\n    useEffect(() => {\n        receiveReviews(bookId);\n    },\n    [receiveReviews,bookId]);\n\n\n    return (\n        <div className=\"row\">\n            <h2>Reviews:</h2>\n            <div className=\"table-responsive\">\n                <ReviewFormContainer bookId={bookId} />\n                <table className=\"table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Reviews of {title}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {reviews.map(function (item, i) {\n                            return <Review review={item.content} key={i} />;\n                        }\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n\n}\n\nexport default ReviewList;\n","import {connect} from 'react-redux';\nimport ReviewList from '../components/reviews/ReviewList';\nimport { receiveReviews } from '../actions';\n\nconst mapStateToProps = (state) => ({\n    reviews : state.reviews\n});\n\nconst mapDispatchToProps = {\n    receiveReviews\n};\n\nconst ReviewListContainer = connect(mapStateToProps, mapDispatchToProps)(ReviewList);\n\nexport default ReviewListContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\nclass Book extends React.Component {\n\n    shouldComponentUpdate(nextProps) {\n        return (this.props.bookId !== nextProps.bookId);\n    }\n\n    render() {\n        const { title, bookId, author, cover } = this.props;\n        return (<tr>\n            <td><Link to={`/reviews/${bookId}/${title}`}>{title}</Link> </td>\n            <td>{author}</td>\n            <td><img src={cover} alt={title} /></td>\n        </tr>);\n\n    }\n}\n\nBook.defaultProps = {\n    title: 'unknown',\n    author: 'unknown',\n    cover: '/NoImage.png'\n\n};\n\n\nBook.propTypes = {\n    title: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    cover: PropTypes.string.isRequired,\n    bookId: PropTypes.number.isRequired\n};\n\nexport default Book;\n","const DropWrapper = ({ dropped, children }) => (\n    <div\n        onDragOver={(e) => { e.preventDefault(); }}\n        onDragEnter={(e) => { e.preventDefault(); }}\n        onDrop={(e) => {\n            e.preventDefault();\n            dropped(e);\n        }}\n    >\n        {children}\n    </div>\n);\n\nexport default DropWrapper;","import PropTypes from 'prop-types';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useState } from 'react';\nimport DropWrapper from '../common/DropWrapper';\nimport useHover from '../common/useHover';\n\nconst BookForm = (props) => {\n    const [hoverRef, isHovering] = useHover();\n    const [image, setImage] = useState(undefined);\n\n    const hoverStyle = () => {\n        return isHovering ? { opacity: '25%' } : { opacity: '100%' };\n    };\n\n    const handleImageChosen = (e) => {\n        let size = 160;\n        let newHeight;\n        let newWidth;\n        let files = e.target.files || e.dataTransfer.files;\n        if (files && files.length > 0) {\n            let f = files[0];\n            let reader = new FileReader();\n            reader.onload = (function (theFile) {\n                return function (e2) {\n                    let image = new Image();\n                    image.onload = function () {\n                        newHeight = this.height;\n                        newWidth = this.width;\n                        if (this.height > size) {\n                            newHeight = size;\n                            newWidth = (newHeight * this.width) / this.height;\n                        }\n                        if (newWidth > size) {\n                            let oldWidth = newWidth;\n                            newWidth = size;\n                            newHeight = (newWidth * newHeight) / oldWidth;\n                        }\n                        let canvas = document.createElement(\"canvas\");\n                        let ctx = canvas.getContext(\"2d\");\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(image, 0, 0, newWidth, newHeight);\n                        //your code here\n                        setImage(canvas.toDataURL(f.type));\n\n                    };\n                    image.src = e2.target.result;\n                };\n            })(f);\n            reader.readAsDataURL(f);\n        }\n    }\n\n    return (\n        <Formik\n\n            initialValues={{\n                title: '',\n                author: ''\n            }}\n            validate={values => {\n                const errors = {};\n                if (!values.title) {\n                    errors.title = 'Title Required';\n                } else if (values.title.length < 3) {\n                    errors.title = 'Title must be at least 3 characters';\n                }\n                if (!values.author) {\n                    errors.author = 'Author Required';\n                } else if (values.author.length < 3) {\n                    errors.author = 'Author must be at least 3 characters';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { resetForm }) => {\n                const book = {\n                    title: values.title,\n                    author: values.author,\n                    cover: image,\n                    bookId: -1\n                }\n                props.addBook(book).then(() => {\n                    resetForm();\n                    setImage(undefined);\n                });\n            }}\n        >\n            {({ isSubmitting }) => (\n                <Form className=\"form-group form-inline\">\n                    <label className=\"control-label\">Title:\n\t\t\t\t<Field type=\"text\" className=\"form-control\" name=\"title\" />\n                    </label>\n                    <label className=\"control-label\">Author:\n\t\t\t\t<Field type=\"text\" className=\"form-control\" name=\"author\" />\n                    </label>\n                    <DropWrapper dropped={handleImageChosen}>\n                        <img src={image || './drop.png'} alt=\"\"\n                             ref={hoverRef} style={hoverStyle()}  />\n                    </DropWrapper>\n                    <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Add Book</button>\n                    <ErrorMessage name=\"title\" className=\"alert alert-danger\" component=\"div\" />\n                    <ErrorMessage className=\"alert alert-danger\" name=\"author\" component=\"div\" />\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nBookForm.propTypes = { addBook: PropTypes.func.isRequired };\n\nexport default BookForm;\n","import { useEffect, useRef, useState } from 'react';\nexport default function useHover() {\n    const [isHovering, setIsHovering] = useState(false);\n    const ref = useRef(null);\n    \n    const handleDragOver = () => {\n        setIsHovering(true);\n    }\n    const handleDragLeave = () => {\n        setIsHovering(false);\n    }\n\n    useEffect(\n        () => {\n            const node = ref.current;\n            if (node) {\n                node.addEventListener('dragover', handleDragOver);\n                node.addEventListener('dragleave', handleDragLeave);\n                node.addEventListener('drop', handleDragLeave);\n                return () => {\n                    node.removeEventListener('dragover', handleDragOver);\n                    node.removeEventListener('dragleave', handleDragLeave);\n                    node.removeEventListener('drop', handleDragLeave);\n                }\n            }   \n        },\n        [ref]\n    );\n\n    return [ref, isHovering];\n}","import {connect} from 'react-redux';\nimport BookForm from '../components/forms/BookForm';\nimport { addBook } from '../actions';\n\n\nconst mapDispatchToProps = {\n    addBook\n};\n\nconst BookFormContainer = connect(null, mapDispatchToProps)(BookForm);\n\nexport default BookFormContainer;\n","import React from 'react';\nimport Book from './Book';\nimport BookFormContainer from '../../containers/BookFormContainer';\nimport * as api from '../../api'; \n\nclass BookList extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            books: []\n        };\n    }\n\n    componentDidMount() {\n        this.getBooks();\n    }\n\n    getBooks() {\n        this.props.receiveBooks();\n    }\n\n    addBook = (title, author) => {\n        api.addBook({\n               title: title,\n                author: author,\n                cover: ''\n        }).then(() => {\n            this.getBooks();\n      });\n    }\n    \n    render() {\n        return (\n            <div className=\"table-responsive\">\n                <BookFormContainer />\n                <table className=\"table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Book</th>\n                            <th>Author</th>\n                            <th>Cover</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                        this.props.books.map(function (item, i) {\n                            return <Book author={item.author} \n                            title={item.title} \n                            cover={item.cover || undefined} \n                            bookId={item.bookId}\n                            key={i} />;\n                        })\n                        }\n\n                    </tbody>\n\n                </table>\n\n            </div>)\n    }\n}\n\nexport default BookList;\n","import {connect} from 'react-redux';\nimport BookList from '../components/books/BookList';\nimport { receiveBooks } from '../actions';\n\nconst mapStateToProps = (state) => ({\n    books : state.books\n});\n\nconst mapDispatchToProps = {\n    receiveBooks\n};\n\nconst BookListContainer = connect(mapStateToProps, mapDispatchToProps)(BookList);\n\nexport default BookListContainer;\n","const About = () => (\n    <>\n        <div className=\"row\">\n            <h1>Book Reactions</h1>\n        </div>\n        <div className=\"row\">\n            <h2>Where you react to books</h2>\n        </div>\n    </>\n)\n\nexport default About;\n","import Navigation from './components/common/Navigation';\nimport ReviewListContainer from './containers/ReviewListContainer';\nimport BookListContainer from './containers/BookListContainer';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport About from './components/about/About';\nimport { Provider } from 'react-redux';\n\nimport './App.css';\n\nfunction App({store}) {\n  return (\n    <Provider store={store}>    \n      <BrowserRouter>\n      <div className=\"container-fluid\">\n        <Navigation />\n        <div className=\"container\">\n          <Route exact path=\"/\" component={BookListContainer} />\n          <Route  path=\"/about\" component={About} />\n          <Route path=\"/reviews/:bookId/:title\" component={ReviewListContainer} />\n        </div>\n      </div>\n    </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport { LIST_REVIEWS, ADD_REVIEW } from '../actions/actionTypes';\n\nconst reviews = [{\n    content: \"\",\n    bookId: -1\n}];\n\nexport const reviewsReducer = (state = reviews, action) => {\n    switch (action.type) {\n        case LIST_REVIEWS:\n            return action.response;\n        case ADD_REVIEW:\n            return [\n                action.response, ...state\n            ];\n        default:\n            return state\n    }\n}","\nimport { LIST_BOOKS, ADD_BOOK } from '../actions/actionTypes';\n\nconst books = [{\n    title: \"\",\n    author: \"\",\n    conver: \"\",\n    bookId: -1\n}];\n\nexport const booksReducer = (state = books, action) => {\n    switch (action.type) {\n        case LIST_BOOKS:\n            return action.response;\n        case ADD_BOOK:\n            return [\n                action.response, ...state\n            ];\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport {reviewsReducer as reviews} from './reviewsReducer';\nimport {booksReducer as books} from './booksReducer';\n\nconst bookStore = combineReducers({\n    books,\n    reviews\n});\n\nexport default bookStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import ReduxThunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport bookStore from './reducers';\n\nconst configureStore = () => {\n   const middlewares = [ReduxThunk];\n   let store = createStore(bookStore,\n\t\t\t\t\t  applyMiddleware(...middlewares));\n   return store;\n}\n\n\nexport default configureStore;\n"],"sourceRoot":""}